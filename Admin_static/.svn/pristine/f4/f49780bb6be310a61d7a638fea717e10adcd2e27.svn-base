<template>
<div class="content">
    <silderBar></silderBar>
    <div class="body_main">
        <navBar></navBar>
        <div class="main" :style="widthMain">
            <!-- tag导航 -->
            <div class="tips" id="" style="background:#cecece;text-align:left;">
                <Tag v-for="(item,index) in tagData" :key="index" :name="item.name" type="dot" closable checkable :color="item.name==colorName?'primary':'default'" @on-close="tagClose(item)" @on-change="tagChange(item)">
                    {{item.index[2].name}}</Tag>
            </div>
            <!-- 查询  -->

            <Button type="primary" size="small" @click="getMenuMessage">查询菜单</Button>
            <Button type="primary" size="small" @click="addMenuMessage">新增菜单</Button>
            <Button type="primary" size="small" @click="delateMenuMessage">删除菜单</Button>

            <div class="top">
                <Button type="primary" size="small" @click="add">新增</Button>
            </div>
            <!-- 主页面内容 -->
            <div class="center" >
                <Table border :columns="columns" :data="tabledata" class="table"  ref="table">
                    <template slot-scope="{ row }" slot="name">
                        <strong>{{ row.name }}</strong>
                    </template>
                    <template slot-scope="{ row, index }" slot="action">
                        <Button type="text" size="small" @click="update(row)">修改</Button>
                        <Button type="text" size="small" @click="remove(index,row)">删除</Button>
                    </template>
                </Table>
            </div>
            <!-- 遮罩层 -->
            <div class="marsk" v-if="showNone"></div>
            <!-- 新增页面 -->
            <div class="pop" v-if="showNonecreate">
                <Form :label-width="80">
                    <FormItem label="菜单名称：">
                        <Input v-model="menu_name" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="排序：">
                        <Input v-model="order" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="上一级id：">
                        <Input v-model="pid" placeholder="请输入..." ></Input>
                    </FormItem>
                    <FormItem label="上传者：">
                        <Input v-model="upid" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="连接：">
                       <Input v-model="url" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem>
                        <Button type="primary" @click="newadd">保存</Button>
                        <Button style="margin-left: 8px" type="dashed" @click="reset">重置</Button>
                        <Button style="margin-left: 8px" @click="close">取消</Button>
                    </FormItem>
                </Form>      
            </div>
            <!-- 修改编辑页面 -->
            <div class="pop" v-if="showNoneUpdate">
                <Form :label-width="80">
                    <FormItem label="菜单名称：">
                        <Input v-model="menu_name" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="排序：">
                        <Input v-model="order" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="上一级id：">
                        <Input v-model="pid" placeholder="请输入..." ></Input>
                    </FormItem>
                    <FormItem label="上传者：">
                        <Input v-model="upid" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem label="连接：">
                       <Input v-model="url" placeholder="请输入..."></Input>
                    </FormItem>
                    <FormItem>
                        <Button type="primary" @click="updateadd">保存</Button>
                        <Button style="margin-left: 8px" type="dashed" @click="reset">重置</Button>
                        <Button style="margin-left: 8px" @click="close">取消</Button>
                    </FormItem>
                </Form>      
            </div>
            <!-- 分页页面 -->
            <div class="bottom">
                <Page :total="100" show-elevator show-sizer show-total :page-size-opts="sortPages" @on-change='fenye'/>
            </div>
        </div>
    </div>
</div>
</template>
<script>
import {square} from '../../../assets/js/download'
export default {
  name: 'Index',
  data () {
    return {
        widthMain:{width:''},//table组件自适应
        tagData:null,//tag数据
        colorName:'',//控制tag选中的状态
        tagDataLength:true,//可取消的状态首页判断

        sortPages:[10],
        query: '', // 查询功能 下拉框绑定的数据
        showNone: false, // 控制页面遮罩层开关
        showNoneUpdate: false, // 修改页面弹出控制
        showNonecreate: false, // 新增页面弹出控制
        cityList: [ // 查询条件
            {
                value: 'Android',
                label: 'Android'
            },
            {
                value: 'iPhone',
                label: 'iPhone'
            },
            {
                value: 'AppStore',
                label: 'AppStore'
            },
            {
                value: 'taiwangooglestore',
                label: '台湾googlestore'
            },
            {
                value: 'taiwanAppStore',
                label: '台湾AppStore'
            }
        ],
        // 表格列名称
        columns: [
            {title: '唯一键',key: 'id',width:100},
            {title: '菜单名称',key: 'menu_name',width:200}, 
            {title: '排序',key: 'order',width:100},
            {title: '上一级id',key: 'pid',width:120},
            {title: '上传者',key: 'upid',width:120},
            {title: '连接',key: 'url',width:200},
            {title: '是否有权限',key: 'state',width:200},
            {title: '操作',slot: 'action',align: 'center',width:150}
        ],
        tabledata: [ // 数据表数据
            {
                id: 'Android',
                menu_name: 'com.sunday.80',
                order: 1,
                pid: 7000,
                upid: 0,
                url: 'New York No. 1 Lake Park',
                state: 1
            }
        ],

        id: null,
        menu_name: null,
        order: null,
        pid: null,
        upid: null,
        url: null,
        state: null,

        resets: { // 暂存页面内容数据
            menu_name: null,	
            order: null,	
            pid: null,
            upid: null,
            url: null
        }
    }
  },
  created() {
    window.addEventListener('resize', this.getWidth);
    this.getWidth();
    this.getTag();
    // this.getMessage();
  },
  destroyed () {
    window.removeEventListener('resize', this.getWidth)
  },
  mounted () {
      
  },
  computed: {
      
  },
  methods: {
      getWidth:function(){//table组件自适应
              var wid =document.body.clientWidth;        //网页可见区域宽(body)
                this.widthMain.width=wid-200+'px';
                // console.log(this.GLOBAL.tagArry)
      },
      getTag:function(){
          this.tagData=JSON.parse(localStorage.getItem("g_tagMArry"));
          this.colorName=this.$route.meta.name;
      },
      tagClose:function(item){
          if(this.tagData.length>1){
                let arr3 = this.tagData;
                let arr4 = arr3.filter(item3=>{
                    return item3.name != item.name;     
                })
                this.tagData=arr4;
                localStorage.setItem('g_tagMArry',JSON.stringify(arr4))
                if(item.name==this.$route.meta.name){
                        this.$router.push({path: arr4[0].index[2].path});
                        this.colorName=arr4[0].name;
                }else{
                
                }
          }else{
              localStorage.removeItem('g_tagMArry');
              this.$router.push({path:'/'});
          }
            
      },
      tagChange:function(item){
        this.colorName=item.name;
        this.$router.push({path: item.index[2].path});
      },
      getMenuMessage:function(){//查询
        let token =localStorage.getItem('h_g_access_token');
        this.$axios({ 
          url: '/api/BPMService/Menu/GetMenuDataAsync',//& 
          method: 'post',
          //params参数必写 , 如果没有参数传{}也可以
          headers:{
                Authorization:'Bearer '+token
          },
          data:{  
            // id:0
          }
        })
        .then((res)=>{
          console.log(res)
          //   if(res.data.code==1){
          //     this.privilegeList=res.data.data; //zong列表信息
          //     this.allCount=res.data.count[0].allcount; //zong条数
          //   }else if(res.data.code==-4){
          //       this.$message('登录信息过期，请重新登录');
          //         localStorage.removeItem('g_userName');
          //         localStorage.removeItem('g_token');
          //         this.$router.push({path: '/login'});
          //   }else{
          //     this.$message(res.msg);
          //   }
        })
        .catch((err)=>{
           console.log(err)
        })
      },
      addMenuMessage:function(){//新增
        let token =localStorage.getItem('h_g_access_token');
        this.$axios({ 
          url: '/api/BPMService/Menu/AddMenuAsync',//& 
          method: 'post',
          //params参数必写 , 如果没有参数传{}也可以
          headers:{
                Authorization:'Bearer '+token
          },
          data:{  
            menu_name:'房间管理',//string	菜单名称
            order:1,//int	排序
            pid:0,//int	上一级id
            upid:0,//int	上传者
            url:'/',//string	连接
          }
        })
        .then((res)=>{
          console.log(res)
          //   if(res.data.code==1){
          //     this.privilegeList=res.data.data; //zong列表信息
          //     this.allCount=res.data.count[0].allcount; //zong条数
          //   }else if(res.data.code==-4){
          //       this.$message('登录信息过期，请重新登录');
          //         localStorage.removeItem('g_userName');
          //         localStorage.removeItem('g_token');
          //         this.$router.push({path: '/login'});
          //   }else{
          //     this.$message(res.msg);
          //   }
        })
        .catch((err)=>{
           console.log(err)
        })
      },
      delateMenuMessage:function(){//删除
        let token =localStorage.getItem('h_g_access_token');
        this.$axios({ 
          url: '/api/BPMService/Menu/GetMenuDataAsync',//& 
          method: 'post',
          //params参数必写 , 如果没有参数传{}也可以
          headers:{
                Authorization:'Bearer '+token
          },
          data:{  
            id:0
          }
        })
        .then((res)=>{
          console.log(res)
          //   if(res.data.code==1){
          //     this.privilegeList=res.data.data; //zong列表信息
          //     this.allCount=res.data.count[0].allcount; //zong条数
          //   }else if(res.data.code==-4){
          //       this.$message('登录信息过期，请重新登录');
          //         localStorage.removeItem('g_userName');
          //         localStorage.removeItem('g_token');
          //         this.$router.push({path: '/login'});
          //   }else{
          //     this.$message(res.msg);
          //   }
        })
        .catch((err)=>{
           console.log(err)
        })
      },
    //   getMessage:function(){
    //     // let token =localStorage.getItem('');
    //     this.$axios({  //http://127.0.0.1:5000/LinkService/Auto/MixVerifyCode
    //       url: '/api/StaticNodeShare/206.html',//& 
    //       method: 'get',
    //       //params参数必写 , 如果没有参数传{}也可以
    //       headers:{
    //             // Authorization:'Bearer '+token
    //       },
    //       data:{  
    //       }
    //     })
    //     .then((res)=>{
    //       console.log(res)
    //     //   if(res.data.code==1){
    //     //     this.privilegeList=res.data.data; //zong列表信息
    //     //     this.allCount=res.data.count[0].allcount; //zong条数
    //     //   }else if(res.data.code==-4){
    //     //       this.$message('登录信息过期，请重新登录');
    //     //         localStorage.removeItem('g_userName');
    //     //         localStorage.removeItem('g_token');
    //     //         this.$router.push({path: '/login'});
    //     //   }else{
    //     //     this.$message(res.msg);
    //     //   }
    //     })
    //     .catch((err)=>{
    //        console.log(err)
    //     })
    //   },
      update: function(row) { // 修改页面
          this.resets.menu_name = row.menu_name;
          this.resets.order = row.order;
          this.resets.pid = row.pid;
          this.resets.upid = row.upid;
          this.resets.url = row.url;

          this.showNone = true,
          this.showNoneUpdate = true,
          this.menu_name = row.menu_name,
          this.order = row.order,
          this.pid = row.pid,
          this.upid = row.upid,
          this.url = row.url,
          console.log(row)
      },
      reset: function() { // 修改页面重置功能s
          this.menu_name = this.resets.menu_name,
          this.order = this.resets.order,
          this.pid = this.resets.pid,
          this.upid = this.resets.upid,
          this.url = this.resets.url
      },
      updateadd: function() { // 修改页面保存
          this.showNone = false,
          this.showNoneUpdate = false,
          console.log(this.id)
      },
      close: function () { // 新建页面和修改页面取消修改
          this.showNone = false, // 遮罩层关闭
          this.showNoneUpdate = false, // 修改页面关闭
          this.showNonecreate = false, // 新建页面关闭

          this.resets.menu_name = null, // 页面重置功能 使用的缓存数据清空
          this.resets.order = null,
          this.resets.pid = null,
          this.resets.upid = null,
          this.resets.url = null

      },
      remove: function(index,row) { // 删除
          this.tabledata.splice(index, 1);
          console.log(row.id)
      },
      add: function () { // 新建数据页面
          this.showNone = true,
          this.showNonecreate = true,
          this.menu_name = null, // 清空数据，防止之前点击过修改造成数据缓存
          this.order = null,
          this.pid = null,
          this.upid = null,
          this.url = null
      },
      newadd: function () { // 新建页面保存
          this.showNone = false,
          this.showNonecreate = false,
          console.log(this.id)
      },
      lookup: function () { // 查找
          console.log(this.query)
      },
      fenye: function (page) { // 页面的分页功能
          console.log(page)
      },
      fenye1: function (page) { // 页面的分页功能
          console.log(page)
      },
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
.main{  // 主页面样式
    overflow-x: scroll;
    overflow: hidden;
    position: relative;
    .tips{ // 主页面
        text-align: left;
    }
    .top{margin-top:10px; margin-left: 20px; display: flex; padding: 5px;  // 表头部分 查找添加 样式
          button{
              margin-left: 15px;
          }
          label{
              margin-left: 10px;
            //   margin-right: 10px;
              font-size: 15px;
          }
    }
    .center{width:100%; margin-top:20px;
        button {
            margin-right: 5px
        }
    }  // 页面中部 表格部分样式
    .bottom{width:100%; margin-top:15px;} // 页面底部 分页部分样式
}
</style>