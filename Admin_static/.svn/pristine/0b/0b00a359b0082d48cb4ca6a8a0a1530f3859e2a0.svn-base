<template>
  <div class="content">
    <silderBar></silderBar>
    <div class="body_main">
        <navBar></navBar>
        <div class="main" :style="widthMain">
            <div class="tips" id="" style="background:#cecece;text-align:left;">
                <Tag v-for="(item,index) in tagData" :key="index" :name="item.name" type="dot" closable checkable :color="item.name==colorName?'primary':'default'" @on-close="tagClose(item)" @on-change="tagChange(item)">
                    {{item.index[2].name}}</Tag>
                <!-- <Tag v-for="(item,index) in tagData" :key="index" :name="item.name" type="dot"  checkable :color="item.name==colorName?'primary':'default'" @on-close="tagClose(item)" @on-change="tagChange(item)" v-else>
                    {{item.index[2].name}}</Tag> -->
            </div>
          <!-- 查询 -->
          <div class="top">
            <label>直播时间统计：</label>
            <DatePicker type="daterange" v-model='datatime' split-panels placeholder="Select date" style="width: 200px"></DatePicker>
            <label>主播IDX：</label>
            <Input v-model="id" placeholder="Enter something..." style="width: 200px" />
            <label>房间ID：</label>
            <Input v-model="pay" placeholder="Enter something..." style="width: 200px" />
              <Button type="primary" @click="lookup">查询</Button>
          </div>
          <!-- 主页面内容 -->
          <div class="center" >
            <Table border :columns="columns" :data="data" class="table"  ref="table">
                <template slot-scope="{ row }" slot="name">
                    <strong>{{ row.name }}</strong>
                </template>
                <template slot-scope="{ row, index }" slot="action">
                    <Button type="text" size="small" style="margin-right: 5px" @click="update(row)">明细</Button>
                </template>
            </Table>
          </div>
          <!-- 遮罩层 -->
          <div class="marsk" v-if="showNone"></div>
          <!-- 详细页面 -->
          <div class="pop" v-if="showNoneUpdate">
            <Button type="primary" @click="close()" class="align_left">返回上一页</Button>
            <h3 class="align_left">主播直播时间明细：</h3>
            <Table border :columns="columns2" :data="data" class="table"  ref="table">
                <template slot-scope="{ row }" slot="name">
                    <strong>{{ row.name }}</strong>
                </template>
            </Table>
            <Page :total="100" show-total show-elevator @on-change='fenye2'/>
          </div>
          <!-- 分页页面 -->
            <div class="bottom">
                <Page :total="100" show-total show-elevator @on-change='fenye'/>
            </div>
        </div>
    </div>
  </div>
</template>

<script>
import {square} from '../../../assets/js/download'
export default {
  name: 'Index',
  data () {
    return {
        widthMain:{width:''},//table组件自适应
        tagData:null,//tag数据
        colorName:'',//对比的tag名字
        tagDataLength:true,//可取消的状态
        //面包屑数组
        query: '', // 查询功能 绑定的数据
        datatime: null, // 查询功能时间范围
        showNone: false, // 控制页面遮罩层开关
        showNoneUpdate: false, // 修改页面弹出控制
        showNonecreate: false, // 新增页面弹出控制
        cityList: [ // 查询条件
            {
                value: 'Android',
                label: 'Android'
            },
            {
                value: 'iPhone',
                label: 'iPhone'
            },
            {
                value: 'AppStore',
                label: 'AppStore'
            },
            {
                value: 'taiwangooglestore',
                label: '台湾googlestore'
            },
            {
                value: 'taiwanAppStore',
                label: '台湾AppStore'
            }
        ],
        // 表格列名称
        columns: [
            {title: '编号',key: 'pay'},
            {title: '主播昵称',key: 'id'}, 
            {title: '直播时长',key: 'money'},
            {title: '室主',key: 'volue'},
            {title: '管理',key: 'gift'},
            {title: '所属房间',key: 'address'},
            {title: '点歌娃娃数',key: 'address'},
            {title: '操作', slot: 'action', align: 'center'}
            ],

        // 明细页面表格列名称   
        columns2: [
            {title: '主播idx',key: 'pay'},
            {title: '房间id',key: 'id'}, 
            {title: '直播开始时间',key: 'money'},
            {title: '直播结束时间',key: 'volue'},
            {title: '直播时长(分钟)',key: 'gift'}
            ],
        data: [ // 数据表数据
            {
                pay: 'Android', // 支付类型
                id: 'com.sunday.80', // 商品ID
                money: 1, // 金额
                volue: 7000, //  币值
                gift: 0, // 礼物赠送币
                address: 'New York No. 1 Lake Park' // 说明
            },
            {
                pay: 'taiwanAppStore',
                id: 'com.sunday.30',
                money: 1.99,
                volue: 15000,
                gift: 0,
                address: 'London No. 1 Lake Park'
            },
            {
                pay: 'iPhone',
                id: 'com.bunny.5',
                money: 3.99,
                volue: 30000,
                gift: 0,
                address: 'Sydney No. 1 Lake Park'
            },
            {
                pay: 'AppStore',
                id: 'com.bunny.6',
                money: 1,
                volue: 7000,
                gift: 0,
                address: 'Ottawa No. 2 Lake Park'
            }
        ],
        pay: '', // 新增和编辑页面使用的数据    支付类型
        id: '', //  新增和编辑页面使用的数据    商品ID
        money: '', //  新增和编辑页面使用的数据    支付金额
        volue: '', //  新增和编辑页面使用的数据    币值
        gift: '', //  新增和编辑页面使用的数据    赠送币
        address: '', //  新增和编辑页面使用的数据      说明

        resets: { // 暂存页面内容数据
            pay: '',  // 支付类型
            id: '', // 商品ID
            money: '', // 支付金额
            volue: '', // 币值
            gift: '', // 赠送币
            address: '' // 说明
        }
    }
  },
  created() {
    window.addEventListener('resize', this.getWidth);
    this.getWidth()
    this.getTag();
  },
  destroyed () {
    window.removeEventListener('resize', this.getWidth)
  },
  mounted () {
      
  },
  computed: {
      
  },
  methods: {
      //table组件处理函数
      getWidth:function(){
              var wid =document.body.clientWidth;        //网页可见区域宽(body)
                this.widthMain.width=wid-200+'px';
      },
      getTag:function(){
          this.tagData=JSON.parse(localStorage.getItem("g_tagMArry"));
          this.colorName=this.$route.meta.name;
      },
       tagClose:function(item){
          if(this.tagData.length>1){
                let arr3 = this.tagData;
                let arr4 = arr3.filter(item3=>{
                    return item3.name != item.name;     
                })
                this.tagData=arr4;
                localStorage.setItem('g_tagMArry',JSON.stringify(arr4))
                if(item.name==this.$route.meta.name){
                        this.$router.push({path: arr4[0].index[2].path});
                        this.colorName=arr4[0].name;
                }else{
                
                }
          }else{
              localStorage.removeItem('g_tagMArry');
              this.$router.push({path:'/'});
          }
            
      },
      tagChange:function(item){
        this.colorName=item.name;
        this.$router.push({path: item.index[2].path});
      },
      update: function(row) { // 修改页面
          this.resets.pay = row.pay
          this.resets.id = row.id
          this.resets.money = row.money
          this.resets.volue = row.volue
          this.resets.gift = row.gift
          this.resets.address = row.address,

          this.showNoneUpdate = true,
          this.pay = row.pay,
          this.id = row.id,
          this.money = row.money,
          this.volue = row.volue,
          this.gift = row.gift,
          this.address = row.address,
          console.log(row)
      },
      reset: function(row) { // 修改页面重置功能
          this.pay = this.resets.pay,
          this.id = this.resets.id,
          this.money = this.resets.money,
          this.volue = this.resets.volue,
          this.gift = this.resets.gift,
          this.address = this.resets.address
      },
      updateadd: function() { // 修改页面保存
          this.showNone = false,
          this.showNoneUpdate = false,
          console.log(this.id)
      },
      close: function () { // 新建页面和修改页面取消修改
          this.showNoneUpdate = false, // 修改页面关闭
          this.showNonecreate = false, // 新建页面关闭

          this.resets.pay = null, // 页面重置功能 使用的缓存数据清空
          this.resets.id = null,
          this.resets.money = null,
          this.resets.volue = null,
          this.resets.gift = null,
          this.resets.address = null

      },
      remove: function(index,row) { // 删除
          this.data.splice(index, 1);
          console.log(row.id)
      },
      lookup: function () { // 查找
          console.log(this.id)
          console.log(this.datatime)
      },
      fenye: function (page) { // 页面的分页功能
          console.log(page)
      },
      fenye2: function (page) { // 页面的分页功能
          console.log(page)
      },
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
.main{
    overflow-x: scroll;
    overflow: hidden;
    position: relative;
    .tips{
        text-align: left;
    }
    .top{margin-top:20px; margin-left: 20px; display: flex;
        button{
              margin-left: 15px;
          }
        label{
              margin-left: 15px;
              font-size: 20px;
          }
    }
    .center{width:100%; margin-top:20px;}
    .bottom{width:100%; margin-top:15px;}
    .marsk{
        position: absolute;
        top: 0;
        left: 0; 
        width: 100%;
        height: 100%;
        background: #000;
        opacity: 0.5;
        z-index: 2999;
    }
    .pop{
        padding:2% 4%;
        position: absolute;
        top: 0%;
        left: 0%; 
        width: 100%;
        height: 100%;
        background: #fff;
        z-index: 3001;
    }
    .align_left { //控制 详细页面 的 返回按钮  
        display: flex;
        margin-bottom: 20px;
    }
}
</style>